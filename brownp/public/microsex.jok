     
Micro was a real-time operator and a dedicated multi-user. His
broadband protocol made it easy for him to interface with numerous
input/output devices, even if it did mean time-sharing.  His links with
authors and editors connected him with many of Silicon Valley's expert
systems and artificial intelligencia.
     
One evening, just as the sun was crashing, he arrived home and parked
his Motorola 68000 in the main drive (he had missed the 5100 bus that
morning) and noticed an elegant piece of liveware admiring the daisy
wheels in his garden.  "She looks user-friendly.  I'll see if she'd like
an update tonight,"  he thought to himself.
     
He browsed over to her casually, admiring the power of her twin, 32-bit
floating point processors.  Even her parms were parsed!  He hadn't seen
structured lines like this since his prom.  "How are you, Honeywell?" he
said.
     
"Yes, I am well." she responded, batting her optical fibers engagingly
and smoothing her console over her curvilinear functions.
     
Mini was her name, and she was delightfully engineered with eyes like
COBOL and a Prime mainframe architecture that set Micro's peripherals
networking all over.  Fears of becoming a Unix were soon fading like
vaporware.
     
Micro settled for a straight line approximation.  "I'm stand-alone
tonight, and looking for an assembly," he said.  "How about computing a
vector to my base address.  I'll output a byte to eat, and we could get
offset later on."
     
Mini ran her priority process for 2.6 milliseconds then transmitted "8K,
I'd been dumped myself recently, and a new page is just what I need to
refresh my disks.  I'll park my machine cycle in your background and meet
you inside."  She walked off leaving Micro admiring her solenoids.
"Wow, what a global variable!  I wonder if she'll like my firmware," he
thought.
     
That night they sat down at the process table for a form feed of fiche
and chips and a bucket of Baudot.  Mini was in conversational mode and
expanded on ambiguous arguments while Micro gave occasional
acknowledgments, although in reality he was analyzing the shortest and
least critical path to her entry point.  He finally settled on the old
`would you like to see my benchmark subroutine.' But Mini was one step
ahead.  She was suddenly up and stripping off her parity bits to
reveal the full functionality of her operating system software!
     
"Let's get BASIC, you RAM, and go for some downtime on the spread
sheets," she panted.  Micro was loaded by this stage; he was afraid his
software wouldn't respond.  Fortunately, his hardware policing module
had a processor of its own and soon was in danger of overflowing its
output buffer - a hang-up that Micro had recently consulted his analyst
about.  "Core!" was all he could say.
     
Micro soon recovered, however, when she went down on the DEC and opened
her device files to reveal her data set ready.  His floppy soon was
coming up to speed.  He accessed his fully packed root device and was
just about to start pushing into her stack when she executed an escape
sequence by popping back to level 1.
     
"Oh no!" she piped.  "You're not shielded."
     
"Reset, Baby," he replied.  "I've been debugged."
     
"I haven't got my current loop enabled, and I'm not ready to support
child processes," she protested.  "That would make me mother board!"
     
"Don't run away," he said, "I'll generate an interrupt."
     
"No way! That's too error prone, and I can't abort because of my design
philosophy."
     
Micro was locked in by this stage, though, and could not be turned off.
She soon stopped his thrashing by introducing a voltage spike into his
main supply, whereupon he fell over with a head crash and went to
sleep.
     
"Computers," she thought as she compiled herself at the asynch, "All
they ever think of is hex."
     


